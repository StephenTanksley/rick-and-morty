{"ast":null,"code":"import _slicedToArray from \"/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/src/components/Episodes/EpisodeList.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { EpisodeCard } from './EpisodeCard';\nexport const EpisodeList = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        episodes = _useState2[0],\n        setEpisodes = _useState2[1];\n\n  useEffect(() => {\n    console.log(props);\n    axios.get('https://rickandmortyapi.com/api/episode/').then(response => {\n      console.log(response);\n      setEpisodes(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \" \", episodes.map((item, index) => {\n    //Doesn't run the map function until we get data back from the API.\n    return React.createElement(EpisodeCard, {\n      item: item,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  }));\n};","map":{"version":3,"sources":["/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/src/components/Episodes/EpisodeList.js"],"names":["React","useState","useEffect","axios","EpisodeCard","EpisodeList","props","episodes","setEpisodes","console","log","get","then","response","catch","error","map","item","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA,oBACJL,QAAQ,CAAC,EAAD,CADJ;AAAA;AAAA,QAC7BM,QAD6B;AAAA,QACnBC,WADmB;;AAGpCN,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAEAH,IAAAA,KAAK,CAACQ,GAAN,CAAU,0CAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAChBJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACAL,MAAAA,WAAW,CAACK,QAAD,CAAX;AACD,KAJD,EAKCC,KALD,CAKOC,KAAK,IAAI;AACdN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACD,KAPD;AASD,GAZQ,EAYN,EAZM,CAAT;AAcA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGR,QAAQ,CAACS,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAC;AAC9B,WACA,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAID,IAArB;AACM,MAAA,GAAG,EAAIC,KADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAKD,GANA,CADH,CADF;AAWE,CA5BG","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios'\nimport {EpisodeCard} from './EpisodeCard'\n\nexport const EpisodeList = (props) => {\n  const [episodes, setEpisodes] = useState([])\n\n  useEffect(() => {\n    console.log(props);\n\n    axios.get('https://rickandmortyapi.com/api/episode/')\n    .then(response => {\n      console.log(response)\n      setEpisodes(response)\n    })\n    .catch(error => {\n      console.log(error)\n    })\n    \n  }, [])\n\n  return(\n    <div> {/*This is just the place where I'm getting to pass in value for my props.*/}\n      {episodes.map((item, index) => {//Doesn't run the map function until we get data back from the API.\n        return (\n        <EpisodeCard item = {item}\n              key = {index}\n            />\n          )\n      })}\n    </div>\n\n  )}"]},"metadata":{},"sourceType":"module"}