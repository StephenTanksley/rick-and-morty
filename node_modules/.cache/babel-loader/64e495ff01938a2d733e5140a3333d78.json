{"ast":null,"code":"import _slicedToArray from \"/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/src/components/Characters/CharacterList.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    margin: 0 auto;\\n    width: 80%;\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: space-around;\\n    flex-wrap: wrap;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nconst CardContainer = styled.div(_templateObject());\nexport const CharacterList = props => {\n  // TODO: Add useState to track data from useEffect\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1]; //just gives us a blank boolean saying we don't have any data here.\n  //Characters\n\n\n  useEffect(() => {\n    axios.get('https://rickandmortyapi.com/api/character').then(response => {\n      // console.log(response.data.results)\n      setCharacters(response.data.results);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // console.log(characters)\n  // console.log(props)\n\n  return (//STEP 7 - This is where I'm using my map.\n    React.createElement(CardContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \" \", episodes.map((item, index) => {\n      //Doesn't run the map function until we get data back from the API.\n      return React.createElement(EpisodeCard, {\n        item: item,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      });\n    }))\n  );\n};","map":{"version":3,"sources":["/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/src/components/Characters/CharacterList.js"],"names":["React","useEffect","useState","axios","CardContainer","styled","div","CharacterList","props","characters","setCharacters","get","then","response","data","results","catch","err","console","log","episodes","map","item","index"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,MAAMC,aAAa,GAAGC,MAAM,CAACC,GAAV,mBAAnB;AASA,OAAO,MAAMC,aAAa,GAAIC,KAAD,IAAY;AACvC;AADuC,oBAEHN,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,QAEhCO,UAFgC;AAAA,QAEpBC,aAFoB,kBAES;AAEhD;;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,KAAK,CAACQ,GAAN,CAAU,2CAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAChB;AACAH,MAAAA,aAAa,CAACG,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAb;AACD,KAJD,EAKCC,KALD,CAKOC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPD;AAQD,GATQ,EASN,EATM,CAAT,CALuC,CAgBvC;AACA;;AAEA,SACE;AACA,wBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YACKG,QAAQ,CAACC,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAC;AACxB,aACA,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAID,IAArB;AACM,QAAA,GAAG,EAAIC,KADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA;AAKP,KANA,CADL;AAFF;AAcD,CAjCM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from 'axios'\n\n\n\nconst CardContainer = styled.div `\n    margin: 0 auto;\n    width: 80%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    flex-wrap: wrap;\n`\n\nexport const CharacterList = (props) =>  {\n  // TODO: Add useState to track data from useEffect\n  const [characters, setCharacters] = useState([])//just gives us a blank boolean saying we don't have any data here.\n\n  //Characters\n  useEffect(() => {\n    axios.get('https://rickandmortyapi.com/api/character')\n    .then(response => {\n      // console.log(response.data.results)\n      setCharacters(response.data.results)\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }, [])\n\n  // console.log(characters)\n  // console.log(props)\n\n  return (\n    //STEP 7 - This is where I'm using my map.\n    <CardContainer> {/*This is just the place where I'm getting to pass in value for my props.*/}\n        {episodes.map((item, index) => {//Doesn't run the map function until we get data back from the API.\n                return (\n                <EpisodeCard item = {item}\n                      key = {index}\n                    />\n            )\n        })}\n    </CardContainer>\n);\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}