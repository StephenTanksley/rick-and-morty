{"ast":null,"code":"import _slicedToArray from \"/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/src/components/Characters/CharacterList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { Container, Button } from '../Styles/Styles';\nimport CharacterCard from './CharacterCard';\nexport const CharacterList = () => {\n  // TODO: Add useState to track data from useEffect\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        totalPages = _useState4[0],\n        setTotalPages = _useState4[1];\n\n  const _useState5 = useState(2),\n        _useState6 = _slicedToArray(_useState5, 2),\n        currentPage = _useState6[0],\n        setCurrentPage = _useState6[1]; //I'm setting my page data here.\n  //   let pageNext = () => {\n  //     if(currentPage >= 1 && currentPage < totalPages.length){\n  //       setCurrentPage(currentPage++)\n  //       console.log(currentPage)\n  //    }\n  //   }\n  //   let pagePrevious = () => {\n  //     if(currentPage > 1 && currentPage <= totalPages.length){\n  //     setCurrentPage(currentPage--)\n  //     console.log(currentPage)\n  //  }\n  // }\n\n\n  useEffect(() => {\n    axios.get(\"https://rickandmortyapi.com/api/character/?page=\".concat(currentPage)).then(response => {\n      setCharacters(response.data.results);\n      setTotalPages(response.data.info.length);\n      console.log(totalPages); // setCurrentPage(1)\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [currentPage]); // console.log(currentPage)\n\n  console.log(characters);\n  console.log(totalPages);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Characters!\")), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => currentPage > 1 && currentPage < totalPages.length ? setCurrentPage(currentPage - 1) : alert('Not a valid universe!'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Previous\"), React.createElement(Button, {\n    onClick: () => currentPage >= 1 && currentPage < totalPages.length - 1 ? setCurrentPage(currentPage + 1) : alert('Not a valid universe!'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Next\")), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \" \", characters.map((item, index) => {\n    //Doesn't run the map function until we get data back from the API.\n    return React.createElement(CharacterCard, {\n      item: item,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/stephentanksley/User-Interface/Sprint-Challenge-Single-Page-Apps/src/components/Characters/CharacterList.js"],"names":["React","useEffect","useState","axios","Container","Button","CharacterCard","CharacterList","characters","setCharacters","totalPages","setTotalPages","currentPage","setCurrentPage","get","then","response","data","results","info","length","console","log","catch","error","alert","map","item","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,MAAnB,QAAgC,kBAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAIA,OAAO,MAAOC,aAAa,GAAG,MAAM;AAClC;AADkC,oBAEEL,QAAQ,CAAC,EAAD,CAFV;AAAA;AAAA,QAE3BM,UAF2B;AAAA,QAEfC,aAFe;;AAAA,qBAGEP,QAAQ,EAHV;AAAA;AAAA,QAG3BQ,UAH2B;AAAA,QAGfC,aAHe;;AAAA,qBAIIT,QAAQ,CAAC,CAAD,CAJZ;AAAA;AAAA,QAI3BU,WAJ2B;AAAA,QAIdC,cAJc,kBAIgB;AAEpD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGEZ,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,KAAK,CAACW,GAAN,2DAA6DF,WAA7D,GACCG,IADD,CACMC,QAAQ,IAAI;AAChBP,MAAAA,aAAa,CAACO,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAb;AACAP,MAAAA,aAAa,CAACK,QAAQ,CAACC,IAAT,CAAcE,IAAd,CAAmBC,MAApB,CAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,UAAZ,EAHgB,CAIhB;AACD,KAND,EAOCa,KAPD,CAOOC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,KATD;AAUD,GAXQ,EAWN,CAACZ,WAAD,CAXM,CAAT,CArBkC,CAkClC;;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYd,UAAZ;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYZ,UAAZ;AAEA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAX,CADF,EAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAOE,WAAW,GAAG,CAAd,IAAmBA,WAAW,GAAGF,UAAU,CAACU,MAA7C,GAAuDP,cAAc,CAACD,WAAW,GAAG,CAAf,CAArE,GAAyFa,KAAK,CAAC,uBAAD,CAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAOE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAOb,WAAW,IAAI,CAAf,IAAoBA,WAAW,GAAGF,UAAU,CAACU,MAAX,GAAmB,CAAtD,GAA2DP,cAAc,CAACD,WAAW,GAAG,CAAf,CAAzE,GAA6Fa,KAAK,CAAC,uBAAD,CAAzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,CAFF,EAaE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGjB,UAAU,CAACkB,GAAX,CAAe,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAAC;AAChC,WACA,oBAAC,aAAD;AACE,MAAA,IAAI,EAAID,IADV;AAEE,MAAA,GAAG,EAAIC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA;AAII,GALL,CADH,CAbF,CADA;AAwBD,CA9DM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from 'axios'\nimport {Container, Button} from '../Styles/Styles'\nimport CharacterCard from './CharacterCard'\n\n\n\nexport const  CharacterList = () => {\n  // TODO: Add useState to track data from useEffect\n  const [characters, setCharacters] = useState([])\n  const [totalPages, setTotalPages] = useState()\n  const [currentPage, setCurrentPage] = useState(2) //I'm setting my page data here.\n\n//   let pageNext = () => {\n//     if(currentPage >= 1 && currentPage < totalPages.length){\n//       setCurrentPage(currentPage++)\n//       console.log(currentPage)\n//    }\n//   }\n\n//   let pagePrevious = () => {\n//     if(currentPage > 1 && currentPage <= totalPages.length){\n//     setCurrentPage(currentPage--)\n//     console.log(currentPage)\n//  }\n// }\n\n\n  useEffect(() => {\n    axios.get(`https://rickandmortyapi.com/api/character/?page=${currentPage}`)\n    .then(response => {\n      setCharacters(response.data.results)\n      setTotalPages(response.data.info.length)\n      console.log(totalPages)\n      // setCurrentPage(1)\n    })\n    .catch(error => {\n      console.log(error)\n    })\n  }, [currentPage])\n\n  // console.log(currentPage)\n  console.log(characters);\n  console.log(totalPages)\n\n  return (\n  <div>\n    <Container><h1>Characters!</h1></Container>\n    <Container>\n      <Button onClick={() => (currentPage > 1 && currentPage < totalPages.length) ? setCurrentPage(currentPage - 1) : alert('Not a valid universe!')}>\n        Previous\n      </Button>\n      \n      \n\n      <Button onClick={() => (currentPage >= 1 && currentPage < totalPages.length -1) ? setCurrentPage(currentPage + 1) : alert('Not a valid universe!')}>Next\n      </Button>\n    </Container>\n\n    <Container> {/*This is just the place where I'm getting to pass in value for my props.*/}\n      {characters.map((item, index) => {//Doesn't run the map function until we get data back from the API.\n        return (\n        <CharacterCard \n          item = {item}\n          key = {index} />\n          )})}\n    </Container>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}